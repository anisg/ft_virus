#!/usr/bin/python3
from pycool import *
import re
from math import ceil
from random import randint

args = parse('add to a gcc ASM file some garbage code',[
        ('file',{'help':'the gcc asm file'}),
        ('-l', '--labels', {'nargs':'+','help':'the labels (or function) where the scrip should add garbage', 'required':True}),
        ('-p', '--percent', {'help':'how much adding garbage codes, in percent, default is 50p (so if a function have 20 lines, it will add 10 lines)', 'default':50}),
        ('-cf', '--countfile', {})
        ])
(lines, labels, p, cf) = [ fget(args.file).split('\n'), dict(zip(args.labels,[True]*len(args.labels))), float(args.percent)/100.0, args.countfile ]


###
# PART 1: detect label
###

def simple_parse(l):
	r = {'kind':'unknown'}
	if l.startswith('.cfi_startproc'):
		r['kind']='start'
		return r
	if l.startswith('.cfi_endproc'):
		r['kind']='end'
		return r        
	j = re.search(r'(.*):.*', l)
	if j:
		name = j.group(1)
		kind = 'label' if not name.startswith('.') else 'sublabel'
		r = {'kind':kind, 'name':name}
	j = re.search(r'.section([a-zA-Z._-]*)', l)
	if j:
		name = j.group(1)
		kind = 'section'
		r = {'kind':kind, 'name':name}
	return r

zones = [] #[(l,r), ...]
l,r = -1,-1
i = 0
for line in lines:
	x = simple_parse(line.strip())
	#print (line.strip(), x)
	if l >= 0:
		if x['kind'] == 'start':
		    l = i
		elif x['kind'] == 'end':
		    r = i
		    zones.append((l+1,r-1))
		    l,r = -1,-1
	if x['kind'] is 'label' and x['name'] in labels:
		l = i
	i += 1

if len(zones) == 0:
	print("Warning: No labels found, exit")
	exit(-1)


###
# PART 2: add garbage codes
###

bef = '\t\t\t.garb_start{uniq}: '
aft = ' .garb_end{uniq}: '
garbage_inst_samples = [
	'mov %rax, %rax;',
        'mov %r9, %r9;',
        'nop;',
        'jmp .garb_end{uniq} ; .byte {nb1} ;',
        'jmp .garb_end{uniq} ; .byte {nb1} ; .byte {nb2} ;',
        'jmp .garb_end{uniq} ; .byte {nb1} ; .byte {nb2} ; .byte {nb4} ;',
        'jmp .garb_end{uniq} ; .byte {nb1} ; .byte {nb2} ; .byte {nb4} ; .byte {nb5} ;',
]

off = 0
for z in zones:
	(l,r) = z
	to_add = int(ceil( r-l )*p)
	offl = 0
	while offl < to_add:
		pos = randint(off + l + 1, off + offl + r - 1)
		r_idx = randint(0, len(garbage_inst_samples)-1)
		choosed = ((bef + garbage_inst_samples[r_idx] + aft)
                    .format(uniq=str(off) + '_' + str(offl),
                        nb1=randint(0,255),nb2=randint(0,255),nb3=randint(0,255),nb4=randint(0,255),nb5=randint(0,255)))
		lines.insert(pos, choosed)
		offl += 1
	off += offl

if cf:
    n = int(fget(cf))
    n += off
    fput(cf, str(n))

f = args.file + '.g.s'
fput(f, '\n'.join(lines))
print("Success! added garbage ({} lines) to \"{}\"".format(off, f))
